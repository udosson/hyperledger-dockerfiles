apiVersion: v1
kind: Template
metadata:
  name: couchdb-deploy
  annotations:
    description: The CouchDB used by the Hyperledger Fabric Peer.
    tags: hyperledger,Fabric,fabric-peer,peer,couchdb

labels:
  createdBy: fabric-peer-template

parameters:
- name: APPLICATION_BASE_NAME
  value: couchdb
  displayName: Application base name
  description: The base name of the application.

- name: APPLICATION_NAME
  value: 
  required: true
  displayName: Application name
  description: The name for the application. The service will be named like the application.

# PVC
- name: PVC_NAME_COUCHDB_DATA
  value: 
  required: true
  displayName: PVC name for /opt/couchdb/data
  description: PVC name of the CouchDB data volume
  
# CouchDB configuration parameters



objects:
  
# DeploymentConfig for deploying the fabric-peer build
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    name: ${APPLICATION_NAME}
    labels:
      app: ${APPLICATION_NAME}
  spec:
  # The replicas count seems to be erroneous, because startup of the pod fails.
  # Without replicas count, deployment succeeds and the pod needs to be scaled up manually.
  #    replicas: 1
    selector:
      app: ${APPLICATION_NAME}
      deploymentconfig: ${APPLICATION_NAME}
    strategy:
      type: Recreate
      recreateParams:
        timeoutSeconds: 180
#      type: Rolling
#      rollingParams:
#        updatePeriodSeconds: 5
#        intervalSeconds: 5
        # give the service some time to start-up
#        timeoutSeconds: 180
    test: false
    triggers:
    - type: ConfigChange
    - type: ImageChange
      imageChangeParams:
        automatic: true
        containerNames:
        - ${APPLICATION_NAME}
        from:
          kind: ImageStreamTag
          name: ${APPLICATION_BASE_NAME}:latest
    template:
      metadata:
        name: ${APPLICATION_NAME}
        labels:
          app: ${APPLICATION_NAME}
          deploymentconfig: ${APPLICATION_NAME}
      spec:
        serviceAccount: deployer
        containers:
        - name: ${APPLICATION_NAME}
          image: ${APPLICATION_BASE_NAME}:latest
          imagePullPolicy: IfNotPresent
          ports:
          - containerPort: 5984
            protocol: TCP
          - containerPort: 4369
            protocol: TCP

          readinessProbe:
            tcpSocket:
              port: 5984
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 10

#          env:
#          - name: COUCHDB_USER
#            value: admin
#          - name: COUCHDB_PASSWORD
#            value: admin
      
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          #specify volume mounts
          volumeMounts:
          - mountPath: /opt/couchdb/data
            name: couchdb-volume-1

        # link volumes to volume claims
        volumes:
        - persistentVolumeClaim:
            claimName: ${PVC_NAME_COUCHDB_DATA}
          name: couchdb-volume-1
        # Used to fix the container to a specific AWS zone
        nodeSelector:
          zone: eu-central-1a
        dnsPolicy: ClusterFirst
        restartPolicy: Always

# Specify the CouchDB service
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}
  spec:
    ports:
    - name: 5984-tcp
      port: 5984
      protocol: TCP
      targetPort: 5984
    - name: 5986-tcp
      port: 5986
      protocol: TCP
      targetPort: 5986
    - name: 4369-tcp
      port: 4369
      protocol: TCP
      targetPort: 4369
    - name: 9100-tcp
      port: 9100
      protocol: TCP
      targetPort: 9100
    selector:
      app: ${APPLICATION_NAME}
      deploymentconfig: ${APPLICATION_NAME}
    sessionAffinity: None
    type: ClusterIP
