apiVersion: v1
kind: Template
metadata:
  name: fabric-orderer-deploy
  annotations:
    description: The Hyperledger Orderer used by the Hyperledger network.
    tags: hyperledger,Fabric,Orderer,fabric-orderer,peer

labels:
  createdBy: fabric-orderer-template

parameters:
- name: APPLICATION_BASE_NAME
  value: fabric-orderer
  displayName: Application base name
  description: The base name of the application.

- name: APPLICATION_NAME
  value: test1
  required: true
  displayName: Application name
  description: The name for the application. The service will be named like the application.

# PVC
# - name: PVC_NAME_ORDERER_CHANNEL_ARTIFACTS_DATA
#   value: 
#   required: true
#   displayName: PVC name of /var/hyperledger/orderer/channel-artifacts
#   description: PVC name for fabric-orderer channel-artifacts data volume

# - name: PVC_NAME_ORDERER_MSP_DATA
#   value: 
#   required: true
#   displayName: PVC name of /var/hyperledger/orderer/msp
#   description: PVC name for fabric-orderer MSP data volume  

# - name: PVC_NAME_ORDERER_TLS_DATA
#   value: 
#   required: true
#   displayName: PVC name of /var/hyperledger/orderer/tls
#   description: PVC name for fabric-orderer TLS data volume  

# - name: PVC_NAME_BIN_DATA
#   value: fabric-bin
#   required: true
#   displayName: PVC name of /var/hyperledger/bin
#   description: PVC name for fabric-bin data volume
  
# Orderer configuration parameters
- name: ENV_ORDERER_GENERAL_LOCALMSPID
  value: OrdererMSP
  required: true
  displayName: ID of the MSP definition as specified in configtx.yaml
  description: ID of the MSP definition as specified in configtx.yaml (Organizations/../ID; e.g. Orderer1MSP in the first PoC or OrdererMSP)

- name: DOMAIN
  value: orderers
  required: true
  displayName: Internal domain of the orderer as specified in configtx.yaml
  description: Internal domain/name of the orderer as specified in configtx.yaml (e.g. orderer1, oderer2, odererSystel)

- name: HOST
  value: ${APPLICATION_NAME}.${DOMAIN}
  required: true
  displayName: Internal host name of the orderer as specified in configtx.yaml
  description: Internal host name of the orderer as specified in configtx.yaml (Application name + domain)


# - name: ENV_CONFIGTX_ORDERER_KAFKA_BROKERS
#   value: 
#   required: true
#   displayName: List of Kafka brokers (e.g. [kafka.bcdltce.svc:9092]).
#   description: List of Kafka brokers.
  
objects:

# PVC for fabric-orderer
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: ${APPLICATION_NAME}-production
    annotations:
      volume.beta.kubernetes.io/storage-class: efs
  spec:
    accessModes:
    - ReadWriteMany
    resources:
      requests:
        storage: 1Gi


# DeploymentConfig for deploying the fabric-orderer build
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    name: ${APPLICATION_NAME}
    labels:
      app: ${APPLICATION_NAME}
  spec:
  # The replicas count seems to be erroneous, because startup of the pod fails.
  # Without replicas count, deployment succeeds and the pod needs to be scaled up manually.
    replicas: 1
    selector:
      app: ${APPLICATION_NAME}
      deploymentconfig: ${APPLICATION_NAME}
      name: ${APPLICATION_NAME}
    strategy:
      type: Recreate
      recreateParams:
        timeoutSeconds: 180
#      type: Rolling
#      rollingParams:
#        updatePeriodSeconds: 5
#        intervalSeconds: 5
        # give the service some time to start-up
#        timeoutSeconds: 180
    test: false
    triggers:
    - type: ConfigChange
    - type: ImageChange
      imageChangeParams:
        automatic: true
        containerNames:
        - ${APPLICATION_NAME}
        from:
          kind: ImageStreamTag
          name: ${APPLICATION_BASE_NAME}:latest
    template:
      metadata:
        name: ${APPLICATION_NAME}
        labels:
          app: ${APPLICATION_NAME}
          deploymentconfig: ${APPLICATION_NAME}
          name: ${APPLICATION_NAME}
      spec:
        serviceAccount: deployer
        containers:
        - name: ${APPLICATION_NAME}
          image: ${APPLICATION_BASE_NAME}:latest
          imagePullPolicy: IfNotPresent
#for preparation only
          command: ["sh", "-c", "orderer"]
#           - /var/hyperledger/bin/orderer
#           args:
#           - start
# #          stdin: true
# #          tty: true
# #---
          ports:
          - containerPort: 30110
            protocol: TCP

          readinessProbe:
            tcpSocket:
              port: 30110
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 10


          env:
          - name: TZ
            value: "Europe/Amsterdam"
          - name: ORDERER_CFG_PATH
            value: /fabric/
          - name: CONFIGTX_ORDERER_ADDRESSES
            value: "orderer:31010"
            #value: "${HOST}:31010"
          - name: ORDERER_GENERAL_LISTENADDRESS
            value: 0.0.0.0
          - name: ORDERER_GENERAL_LISTENPORT
            value: "31010"
          - name: ORDERER_GENERAL_LOGLEVEL
            value: debug
          - name: ORDERER_GENERAL_LOCALMSPDIR
            value: /fabric/crypto-config/ordererOrganizations/example.com/orderers/orderer/msp
            #value: /fabric/crypto-config/ordererOrganizations/${DOMAIN}/orderers/${HOST}/msp
          - name: ORDERER_GENERAL_LOCALMSPID
            value: OrdererMSP
            #value: ${ENV_ORDERER_GENERAL_LOCALMSPID}
          - name: ORDERER_GENERAL_TLS_ENABLED
            value: "true"
          - name: ORDERER_GENERAL_TLS_PRIVATEKEY
            value: /fabric/crypto-config/ordererOrganizations/example.com/orderers/orderer/tls/server.key
            #value: /fabric/crypto-config/ordererOrganizations/${DOMAIN}/orderers/${HOST}/tls/server.key
          - name: ORDERER_GENERAL_TLS_CERTIFICATE
            value: /fabric/crypto-config/ordererOrganizations/example.com/orderers/orderer/tls/server.crt
            #value: /fabric/crypto-config/ordererOrganizations/${DOMAIN}/orderers/${HOST}/tls/server.crt
          - name: ORDERER_GENERAL_TLS_ROOTCAS
            value: /fabric/crypto-config/ordererOrganizations/example.com/orderers/orderer/tls/ca.crt
            #value: /fabric/crypto-config/ordererOrganizations/${DOMAIN}/orderers/${HOST}/tls/ca.crt
          - name: ORDERER_GENERAL_CLUSTER_CLIENTPRIVATEKEY
            value: /fabric/crypto-config/ordererOrganizations/example.com/orderers/orderer/tls/server.key
            #value: /fabric/crypto-config/ordererOrganizations/${DOMAIN}/orderers/${HOST}/tls/server.key
          - name: ORDERER_GENERAL_CLUSTER_CLIENTCERTIFICATE
            value: /fabric/crypto-config/ordererOrganizations/example.com/orderers/orderer/tls/server.crt
            #value: /fabric/crypto-config/ordererOrganizations/${DOMAIN}/orderers/${HOST}/tls/server.crt
          - name: ORDERER_GENERAL_CLUSTER_ROOTCAS
            value: /fabric/crypto-config/ordererOrganizations/example.com/orderers/orderer/tls/ca.crt
            #value: //fabric/crypto-config/ordererOrganizations/${DOMAIN}/orderers/${HOST}/tls/ca.crt
          - name: ORDERER_GENERAL_BOOTSTRAPFILE
            value: /fabric/channel-artifacts/genesis.block
          - name: ORDERER_GENERAL_BOOTSTRAPMETHOD
            value: file
          - name: GODEBUG
            value: "netdns=go"

          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          #specify volume mounts
          volumeMounts:
          # - mountPath: /var/hyperledger/orderer/channel-artifacts
          #   name: orderer-volume-1
          # - mountPath: /var/hyperledger/orderer/msp
          #   name: orderer-volume-2
          # - mountPath: /var/hyperledger/orderer/tls
          #   name: orderer-volume-3
          # - mountPath: /var/hyperledger/bin
          #   name: orderer-volume-4
          - mountPath: /var/hyperledger/production
            name: orderer-volume-5
          - mountPath: /fabric
            name: fabricfiles

        # link volumes to volume claims
        volumes:
        # - persistentVolumeClaim:
        #     claimName: ${PVC_NAME_ORDERER_CHANNEL_ARTIFACTS_DATA}
        #   name: orderer-volume-1
        # - persistentVolumeClaim:
        #     claimName: ${PVC_NAME_ORDERER_MSP_DATA}
        #   name: orderer-volume-2
        # - persistentVolumeClaim:
        #     claimName: ${PVC_NAME_ORDERER_TLS_DATA}
        #   name: orderer-volume-3
        # - persistentVolumeClaim:
        #     claimName: ${PVC_NAME_BIN_DATA}
        #   name: orderer-volume-4
        - persistentVolumeClaim:
            claimName: ${APPLICATION_NAME}-production
          name: orderer-volume-5
        - persistentVolumeClaim:
            claimName: fabric-pvc
          name: fabricfiles
        # Used to fix the container to a specific AWS zone
        nodeSelector:
          zone: eu-central-1a
        dnsPolicy: ClusterFirst
        restartPolicy: Always

# Specify the service
# - apiVersion: v1
#   kind: Service
#   metadata:
#     labels:
#       app: ${APPLICATION_NAME}
#     name: ${APPLICATION_NAME}
#   spec:
#     ports:
#     - name: 30110-tcp
#       port: 30110
#       protocol: TCP
#       targetPort: 30110
#     selector:
#       app: ${APPLICATION_NAME}
#       deploymentconfig: ${APPLICATION_NAME}
#     sessionAffinity: None
#     type: ClusterIP


# Specify the fabric-orderer service
#- apiVersion: v1
#  kind: Service
#  metadata:
#    labels:
#      app: ${APPLICATION_NAME}
#    name: ${APPLICATION_NAME}-open
#    annotations:
#      service.beta.kubernetes.io/aws-load-balancer-internal: 0.0.0.0/0
#  spec:
#    ports:
#    - name: 7050-tcp
#      port: 7050
#      protocol: TCP
#      targetPort: 7050
#    selector:
#      app: ${APPLICATION_NAME}
#      deploymentconfig: ${APPLICATION_NAME}
#      name: ${APPLICATION_NAME}
#    sessionAffinity: None
#    type: LoadBalancer
#    clusterIP: 
#    externalTrafficPolicy: Cluster
